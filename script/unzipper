#!/bin/bash

source script/setup-env $@

TRASHDIR=$(mktemp -d /tmp/bootstrap.XXXXXXXXXXXXXXXXX)
cleanup() {
  rm -rf "$TRASHDIR"
}
trap cleanup EXIT

mkdir -p "$SHARDS_INSTALL_PATH"
mkdir -p "$SHARDS_CACHE_PATH/github.com"

# check if the .shards.info file exists, if it doesn't this is a fresh bootstrapping
if [ ! -f "$VENDOR_SHARDS_INFO_FILE" ]; then
  # if no .shards.info file found, this must be a fresh bootstrapping

  # iterate over all the cached shards in the vendor/shards/cache directory
  for shard in $(find "$SHARDS_CACHED" -type f -maxdepth 1); do

    # unzip the file into the TRASHDIR
    unzip -q -o "$shard" -d "$TRASHDIR"

    # get the only name of the dir in the TRASHDIR
    shard_name=$(ls "$TRASHDIR/shard/")

    # clear up the shard in the install dir if it exists
    rm -rf "$SHARDS_INSTALL_PATH/$shard_name"

    # move the shard and cache directories to the correct location
    cp -r "$TRASHDIR/shard/"* "$SHARDS_INSTALL_PATH/" 2>/dev/null || true
    cp -r "$TRASHDIR/cache/"* "$SHARDS_CACHE_PATH/github.com/" 2>/dev/null || true

    # cleanup the TRASHDIR
    rm -rf "$TRASHDIR/shard"
    rm -rf "$TRASHDIR/cache"

    shard_cache_sha=$(shasum -a 256 "$shard" | cut -d' ' -f1)

    # write the new sha to the $SHARD_SHA_FILE file
    cat > "$SHARDS_INSTALL_PATH/$shard_name/$SHARD_SHA_FILE" <<< "$shard_cache_sha"
  done

else
  # if found .shards.info file, this must be a bootstrap re-run - we will check if the shards have changed by comparing the sha256 of the cached shard and the sha256 of the current shard

  # Use yq to parse the file and extract shard names and versions
  shards=$(yq eval '.shards | to_entries | .[] | "\(.key)|\(.value.git)|\(.value.version)"' $VENDOR_SHARDS_INFO_FILE)

  # Loop over each shard
  echo "$shards" | while IFS= read -r shard; do
    # Extract name and version
    name=$(echo $shard | cut -d'|' -f1)
    version=$(echo $shard | cut -d'|' -f3)

    shard_cache_sha=$(shasum -a 256 "$SHARDS_CACHED/$name-$version.shard" | cut -d' ' -f1)
    shard_current_sha=""
    if [ -f "$SHARDS_INSTALL_PATH/$name/$SHARD_SHA_FILE" ]; then
      shard_current_sha=$(cat "$SHARDS_INSTALL_PATH/$name/$SHARD_SHA_FILE")
    fi

    if [ "$shard_cache_sha" != "$shard_current_sha" ]; then
      echo "shard $name $version has changed, updating"

      # unzip the file into the TRASHDIR
      unzip -q -o "$SHARDS_CACHED/$name-$version.shard" -d "$TRASHDIR"

      # clear up the shard in the install dir if it exists
      rm -rf "$SHARDS_INSTALL_PATH/$name"

      # move the shard and cache directories to the correct location
      cp -r "$TRASHDIR/shard/"* "$SHARDS_INSTALL_PATH/" 2>/dev/null || true
      cp -r "$TRASHDIR/cache/"* "$SHARDS_CACHE_PATH/github.com/" 2>/dev/null || true

      # write the new sha to the $SHARD_SHA_FILE file
      cat > "$SHARDS_INSTALL_PATH/$name/$SHARD_SHA_FILE" <<< "$shard_cache_sha"

      # cleanup the TRASHDIR
      rm -rf "$TRASHDIR/shard"
      rm -rf "$TRASHDIR/cache"
    fi
  done
fi
